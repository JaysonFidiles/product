import { Scalar } from '../nodes/Scalar.js';
import { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';

const getFoldOptions = (ctx, isBlock) => ({
    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
});
// Also checks for lines starting with %, as parsing the output as YAML 1.1 will
// presume that's starting a new document.
const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
        return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
        return false;
    for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === '\n') {
            if (i - start > limit)
                return true;
            start = i + 1;
            if (strLen - start <= limit)
                return false;
        }
    }
    return true;
}
function doubleQuotedString(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
        return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
    let str = '';
    let start = 0;
    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === ' ' && json[i + 1] === '\\' && json[i + 2] === 'n') {
            // space before newline needs to be escaped to not be folded
            str += json.slice(start, i) + '\\ ';
            i += 1;
            start = i;
            ch = '\\';
        }
        if (ch === '\\')
            switch (json[i + 1]) {
                case 'u':
                    {
                        str += json.slice(start, i);
                        const code = json.substr(i + 2, 4);
                        switch (code) {
                            case '0000':
                                str += '\\0';
                                break;
                            case '0007':
                                str += '\\a';
                                break;
                            case '000b':
                                str += '\\v';
                                break;
                            case '001b':
                                str += '\\e';
                                break;
                            case '0085':
                                str += '\\N';
                                break;
                            case '00a0':
                                str += '\\_';
                                break;
                            case '2028':
                                str += '\\L';
                                break;
                            case '2029':
                                str += '\\P';
                                break;
                            default:
                                if (code.substr(0, 2) === '00')
                                    str += '\\x' + code.substr(2);
                                else
                                    str += json.substr(i, 6);
                        }
                        i += 5;
                        start = i + 1;
                    }
                    break;
                case 'n':
                    if (implicitKey ||
                        json[i + 2] === '"' ||
                        json.length < minMultiLineLength) {
                        i += 1;
                    }
                    else {
                        // folding will eat first newline
                        str += json.slice(start, i) + '\n\n';
                        while (json[i + 2] === '\\' &&
                            json[i + 3] === 'n' &&
                            json[i + 4] !== '"') {
                            str += '\n';
                            i += 2;
                        }
                        str += indent    <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Configurations\Modem70\Driver\Settings">
      <registryValue name="Blind_Off" valueType="REG_SZ" value="X4" />
      <registryValue name="Blind_On" valueType="REG_SZ" value="X3" />
      <registryValue name="CallSetupFailTimer" valueType="REG_SZ" value="S7=&lt;#&gt;" />
      <registryValue name="Compression_Off" valueType="REG_SZ" value="%C0" />
      <registryValue name="Compression_On" valueType="REG_SZ" value="%C3" />
      <registryValue name="DialPrefix" valueType="REG_SZ" value="D" />
      <registryValue name="DialSuffix" valueType="REG_SZ" value="" />
      <registryValue name="ErrorControl_Cellular" valueType="REG_SZ" value="\N3 -K1 )M1 -Q1 *H1" />
      <registryValue name="ErrorControl_Cellular_Forced" valueType="REG_SZ" value="\N2 -K1 )M1 -Q1 *H1" />
      <registryValue name="ErrorControl_Forced" valueType="REG_SZ" value="\N2" />
      <registryValue name="ErrorControl_Off" valueType="REG_SZ" value="\N0" />
      <registryValue name="ErrorControl_On" valueType="REG_SZ" value="\N3" />
      <registryValue name="FlowControl_Hard" valueType="REG_SZ" value="&amp;K3" />
      <registryValue name="FlowControl_Off" valueType="REG_SZ" value="&amp;K0" />
      <registryValue name="FlowControl_Soft" valueType="REG_SZ" value="&amp;K4" />
      <registryValue name="InactivityTimeout" valueType="REG_SZ" value="S30=&lt;#&gt;" />
      <registryValue name="Modulation_Bell" valueType="REG_SZ" value="B1" />
      <registryValue name="Modulation_CCITT" valueType="REG_SZ" value="B0" />
      <registryValue name="Modulation_CCITT_V23" valueType="REG_SZ" value="B2" />
      <registryValue name="Prefix" valueType="REG_SZ" value="AT" />
      <registryValue name="Pulse" valueType="REG_SZ" value="P" />
      <registryValue name="SpeakerMode_Dial" valueType="REG_SZ" value="M1" />
      <registryValue name="SpeakerMode_Off" valueType="REG_SZ" value="M0" />
      <registryValue name="SpeakerMode_On" valueType="REG_SZ" value="M2" />
      <registryValue name="SpeakerMode_Setup" valueType="REG_SZ" value="M3" />
      <registryValue name="SpeakerVolume_High" valueType="REG_SZ" value="L3" />
      <registryValue name="SpeakerVolume_Low" valueType="REG_SZ" value="L1" />
      <registryValue name="SpeakerVolume_Med" valueType="REG_SZ" value="L2" />
      <registryValue name="SpeedNegotiation_Off" valueType="REG_SZ" value="N0" />
      <registryValue name="SpeedNegotiation_On" valueType="REG_SZ" value="N1" />
      <registryValue name="Terminator" valueType="REG_SZ" value="&lt;cr&gt;" />
      <registryValue name="Tone" valueType="REG_SZ" value="T" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN-ARNGSM-MC2-9774">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem47" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem47%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN-ARNIS-MX-MC2-35E4">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem49" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem49%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN-ARNMX-MC2-184E">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem42" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem42%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN-ARNMX-MC2-1BDB">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem48" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem48%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN_INFORMATIQUE-ARNDX+_MC2-1E2C">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem4" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem4%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN_INFORMATIQUE-ARNIS-MC2-C1FD">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem14" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem14%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN_INFORMATIQUE-ARNIS-MD-MC2-0539">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem7" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem33%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Descriptors\PCMCIA\ARN_INFORMATIQUE-ARNMD-MC2-4600">
      <registryValue name="Configuration" valueType="REG_SZ" value="Modem70" />
      <registryValue name="Description" valueType="REG_SZ" value="%modem7%" />
      <registryValue name="Manufacturer" valueType="REG_SZ" value="%mfg%" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmarn.inf_amd64_dd1a52efe5785403\Strings">
      <registryValue name="mfg" valueType="REG_SZ" value="ARN" />
      <registryValue name="modem14" valueType="REG_SZ" value="ARNIS-MC2 ISDN GSM PCMCIA" />
      <registryValue name="modem33" valueType="REG_SZ" value="ARNIS-MD-MC2 PCMCIA ISDN V34+ GSM" />
      <registryValue name="modem4" valueType="REG_SZ" value="ARNDX+-MC2 PCMCIA VFC" />
      <registryValue name="modem42" valueType="REG_SZ" value="ARNMX-MC2 Pcmcia V90 GSM" />
      <registryValue name="modem47" valueType="REG_SZ" value="ARNGSM-MC2 PCMCIA GSM" />
      <registryValue name="modem48" valueType="REG_SZ" value="ARNMX-MC2 V90 GSM PCMCIA" />
      <registryValue name="modem49" valueType="REG_SZ" value="ARNIS-MX-MC2 ISDN V90 GSM PCMCIA" />
      <registryValue name="modem7" valueType="REG_SZ" value="ARNMD-MC2 Pcmcia V34+ GSM" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
  </registryKeys>
  <trustInfo>
    <security>
      <accessControl>
        <securityDescriptorDefinitions>
          <securityDescriptorDefinition name="62791918C58049A69FA4D51EF72F68381DD90E4C" sddl="(inheri   return singleQuotedString(ss.value, ctx);
            case Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t = (implicitKey && defaultKeyType) || defaultStringType;
        res = _stringify(t);
        if (res === null)
            throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
}

export { stringifyString };
